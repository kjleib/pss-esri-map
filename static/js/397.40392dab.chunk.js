"use strict";(globalThis.webpackChunkjsapi_create_react_app=globalThis.webpackChunkjsapi_create_react_app||[]).push([[397],{50397:(e,t,r)=>{r.r(t),r.d(t,{default:()=>y});var i=r(27366),a=r(10064),n=r(92026),s=r(94172),o=r(49861),c=(r(63780),r(93169),r(25243),r(69912)),l=r(49818),d=r(99288),p=r(31666);function u(e,t){if((0,n.Wi)(e)&&(0,n.Wi)(t))return null;const r={};return(0,n.pC)(t)&&(r.geometry=t.toJSON()),(0,n.pC)(e)&&(r.where=e),r}let h=class extends d.default{constructor(){super(...arguments),this._enabledDataReceived=!1,this.errorString=null,this.connectionStatus="disconnected"}initialize(){this.handles.add([(0,s.YP)((()=>this.layer?.purgeOptions),(()=>this._update())),(0,s.YP)((()=>this.suspended),(e=>{e?this._proxy.pauseStream():this._proxy.resumeStream()}))])}get connectionError(){if(this.errorString)return new a.Z("stream-controller",this.errorString)}on(e,t){"data-received"===e&&(this._enabledDataReceived=!0,this._proxy.enableEvent("data-received",!0));const r=super.on(e,t),i=this;return{remove(){r.remove(),"data-received"===e&&(i._proxy.closed||i.hasEventListener("data-received")||i._proxy.enableEvent("data-received",!1))}}}queryLatestObservations(e,t){if(!this.layer.timeInfo.endField&&!this.layer.timeInfo.startField)throw new a.Z("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");return this._proxy.queryLatestObservations(this._cleanUpQuery(e),t).then((e=>{const t=l.default.fromJSON(e);return t.features.forEach((e=>{e.layer=this.layer,e.sourceLayer=this.layer})),t}))}detach(){super.detach(),this.connectionStatus="disconnected"}_createClientOptions(){return{...super._createClientOptions(),setProperty:e=>{this.set(e.propertyName,e.value)}}}_createTileRendererHash(e){const t=`${JSON.stringify(this.layer.purgeOptions)}.${JSON.stringify(u(this.layer.definitionExpression,this.layer.geometryDefinition))})`;return super._createTileRendererHash(e)+t}async _createServiceOptions(){const e=this.layer,{objectIdField:t}=e,r=e.fields.map((e=>e.toJSON())),i=(0,p.oq)(e.geometryType),a=e.timeInfo&&e.timeInfo.toJSON()||null,n=e.spatialReference?e.spatialReference.toJSON():null;return{type:"stream",fields:r,geometryType:i,objectIdField:t,timeInfo:a,source:this.layer.parsedUrl,serviceFilter:u(this.layer.definitionExpression,this.layer.geometryDefinition),purgeOptions:this.layer.purgeOptions.toJSON(),enableDataReceived:this._enabledDataReceived,spatialReference:n,maxReconnectionAttempts:this.layer.maxReconnectionAttempts,maxReconnectionInterval:this.layer.maxReconnectionInterval,updateInterval:this.layer.updateInterval,customParameters:e.customParameters}}};(0,i._)([(0,o.Cb)()],h.prototype,"errorString",void 0),(0,i._)([(0,o.Cb)({readOnly:!0})],h.prototype,"connectionError",null),(0,i._)([(0,o.Cb)()],h.prototype,"connectionStatus",void 0),h=(0,i._)([(0,c.j)("esri.views.2d.layers.StreamLayerView2D")],h);const y=h}}]);
//# sourceMappingURL=397.40392dab.chunk.js.map